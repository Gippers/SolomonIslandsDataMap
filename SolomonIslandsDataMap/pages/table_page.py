# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_table_page.ipynb.

# %% auto 0
__all__ = ['title', 'layout', 'update_grid']

# %% ../../nbs/04_table_page.ipynb 2
# TODO minimise these imports a bit where possible
from nbdev.showdoc import *
# TODO work out how to get around below hack
try:
    from SolomonIslandsDataMap.dash_components import gen_dash_grid, gen_dd
    from SolomonIslandsDataMap.app_data import mytitle, data_grid, stored_data, dropdown_location \
        , control_type, dd_var, dd_measure, dropdown_geo
    from SolomonIslandsDataMap.load_data import SolomonGeo
except: 
    from dash_components import gen_dash_grid, gen_dd
    from app_data import mytitle, map_graph, selectedBarGraph, stored_data, dropdown_location \
        , control_type, dd_var, dd_measure, dropdown_geo
    from load_data import SolomonGeo
from fastcore.test import *
from dash import Dash, dcc, callback, Output, Input, State, html, Patch, ctx, register_page  
import dash_bootstrap_components as dbc    
import dash_ag_grid as dag

# %% ../../nbs/04_table_page.ipynb 3
try:
    register_page(__name__, 
                        path='/datatable',
                        title='Data Table',
                        name='Data Table')
except:
    pass

# %% ../../nbs/04_table_page.ipynb 6
title = dcc.Markdown(children="## This is a placeholder test!!") # TODO This needs a default title

# %% ../../nbs/04_table_page.ipynb 7
def layout():
    return dbc.Container([title,
                          data_grid,
                          stored_data,
                        ])

# %% ../../nbs/04_table_page.ipynb 10
@callback(
    Output(data_grid, 'children'),
    Output(title, 'children'),
    Input(dropdown_geo, 'value'),
    Input(control_type, 'value'),
    Input('measureDropdown', 'value'),
    Input('varDropdown', 'value'),
    State('geo_df', 'data'),
    allow_duplicate=True,
)
def update_grid(geo_input:str, # User input from the geography dropdown
                     data_type:str, # User input of type of data
                     measure:str, # A string contiaining the census variable and measure split by ':'
                     variable:str, # The state of the variable dropdown
                     dict_sol:dict, # The dataset in dictionary form
              )->(dag.AgGrid, str): # Returns a graph object figure after being updated and the dynamic title
    '''
    Updates the focus census variable or geography dispalayed on the map
    '''
    # TODO add proportion functionality
    # TODO add add an option for first call to be a default rebuild
    # TODO decide wether to implment patch later
    patched_figure = Patch()
    button_clicked = ctx.triggered_id

    sol_geo = SolomonGeo.gen_stored(dict_sol) # reload the data

    print(button_clicked)
    if button_clicked == dropdown_location.id:
        # Update disaplayed geography 
        # TODO in future update row highlighting
        print("locationsleected")
        
    elif button_clicked == control_type.id or button_clicked == dropdown_geo.id or button_clicked == 'varDropdown' or button_clicked == 'measureDropdown':
        # Rebuild the table given updated selection
        patched_figure = gen_dash_grid(sol_geo, geo_input,variable, measure, type_filter = data_type)


    #elif button_clicked == 'measureDropdown':
        # TODO in future update for column highlighting/ordering
    #    print("measure selected")
        
    # returned objects are assigned to the component property of the Output
    # After updating fileter, we always reset map selection 

    return patched_figure, '## ' + variable + " by " + geo_input
