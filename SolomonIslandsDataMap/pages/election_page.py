# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/05_election_page.ipynb.

# %% auto 0
__all__ = ['init_init', 'init_election', 'dict_sol', 'layout', 'update_election_bar', 'map_click']

# %% ../../nbs/05_election_page.ipynb 2
# TODO minimise these imports a bit where possible
from nbdev.showdoc import *
# TODO work out how to get around below hack
try:
    from SolomonIslandsDataMap.dash_components import election_bar_plot, gen_dd
    from SolomonIslandsDataMap.app_data import mytitle, election_map, election_bar, stored_data, fake_slider
    from SolomonIslandsDataMap.load_data import SolomonGeo
except: 
    from dash_components import election_bar_plot, gen_dd
    from app_data import mytitle, election_map, election_bar, stored_data, fake_slider
    from load_data import SolomonGeo
from fastcore.test import *
from dash import Dash, dcc, callback, Output, Input, State, html, Patch, ctx, register_page, callback_context 
import dash_bootstrap_components as dbc    
import dash_ag_grid as dag
import plotly.graph_objects as go
from dash.exceptions import PreventUpdate

# %% ../../nbs/05_election_page.ipynb 3
try:
    register_page(__name__, 
                        path='/electionmap',
                        title='Election Map',
                        name='Election Map')
except:
    pass

# %% ../../nbs/05_election_page.ipynb 5
init_init = dcc.Store(id="initial-initial", data='election')
init_election = dcc.Store(id="initial-election", data='election')
def layout():
    return dbc.Col(mytitle, width = 8),\
                dcc.Loading(
                    id="loading-election-map",
                    type="default",
                    children = election_map,
                ),\
                dcc.Loading(
                    id="loading-election-bar",
                    type="default",
                    children = election_bar,), init_init, init_election, fake_slider


# %% ../../nbs/05_election_page.ipynb 7
dict_sol = stored_data.data

# %% ../../nbs/05_election_page.ipynb 9
# Callback allows components to interact
@callback(
    Output('election_bar', 'figure'),
    Input("segmented_type", 'value'),
    Input('electionDropdown', 'value'),
    Input('locElecDropdown', 'value'),
    Input('initial-election', 'data'),
    Input('elecYearDropdown', 'value'),
    Input("segmented_geo", 'value'),
    allow_duplicate=True,
    prevent_initial_call=True,
)
def update_election_bar(data_type:str, # User input of type of data
                     election:str, # A string contiaining the election type
                     loc_selection:str, # The selected locations, may be none
                     init_load:str, # An empty dictionary always, triggers initial load
                     elecYear:str, # The year of the election
                     geo_input:str, # User input from the geography dropdown
                     #dict_sol:dict, # The dataset in dictionary form
              )->(type(go.Figure())): # Returns a graph object figure after being updated and the dynamic title
    '''
    Updates the focus election variable on the bar plot
    '''
    sol_geo = SolomonGeo.gen_stored(dict_sol) # reload the data

    # Create newly selected barplot
    print("Func: update_election_bargraph")

    bg = election_bar_plot(sol_geo, geo_input, elecYear, election, loc_selection, data_type)

    # returned objects are assigned to the component property of the Output
    # After updating fileter, we always reset map selection 

    return  bg

# %% ../../nbs/05_election_page.ipynb 11
@callback(
    Output('locElecDropdown', 'value', allow_duplicate=True),
    Output('election_map', "clickData"),
    Output('election_map', "selectedData"),
    Input('election_map', 'clickData'),
    State('locElecDropdown', 'value'),
    prevent_initial_call=True,
    allow_duplicate=True,
) # TODO - eventually can I turn this into a clientside callbback?
def map_click(clickData:dict, # The currently clicked location on the map
              selectedData:dict, # The currently selected locations on the map
                )->[str]: # Returns the new value for the dropdown
    """This function updates the elections barplot based on the map click data,
    only a single location selected for this one"""

    print("Func: map_click")
    if clickData is None:
        # When nothing is selected or clicked, don't update anything
        raise PreventUpdate # if changing to clientside, use: window.dash_clientside.no_update
        #return prev_locs, None, None
    else:
        selections = list(map(lambda x: x['location'], clickData['points']))
        print(selections)
        # Return the last selection
        return selections.pop(), None, None
