# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_app.ipynb.

# %% auto 0
__all__ = ['sol_geo', 'geo_df', 'app', 'server', 'mytitle', 'mygraph', 'geos', 'cen_vars', 'dropdown_geo', 'dropdown_var',
           'SIDEBAR_STYLE', 'sidebar', 'update_graph']

# %% ../nbs/01_app.ipynb 2
from nbdev.showdoc import *
# TODO work out how to get around below hack
try:
    from SolomonIslandsDataMap.load_data import *
except: 
    from load_data import *
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio # Unless this is used graphs will not be dynamic?
import json
from git import Repo
import pandas as pd
import numpy as np
from fastcore.test import *
from dash import Dash, dcc, Output, Input, html, Patch  # pip install dash
import dash_bootstrap_components as dbc    # pip install dash-bootstrap-components
import random

# %% ../nbs/01_app.ipynb 4
sol_geo = SolomonGeo.load_pickle("/testData/")
geo_df = sol_geo.geo_df

# %% ../nbs/01_app.ipynb 6
# Build your components
# FYI the best themes seem to be: [Darkly, Flatly, Minty, Slate]
app = Dash(__name__, external_stylesheets=[dbc.themes.MINTY])
server = app.server


mytitle = dcc.Markdown(children='')
mygraph = dcc.Graph(figure={})
geos = geo_df.loc[:, 'agg'].unique()
cen_vars = sol_geo.census_vars
dropdown_geo = dcc.Dropdown(options=geos,
                        value=geos[0],  # initial value displayed when page first loads
                        clearable=False)
dropdown_var = dcc.Dropdown(options=cen_vars,
                        value=cen_vars[-1],  # initial value displayed when page first loads
                        clearable=False)

# %% ../nbs/01_app.ipynb 8
# Note, for now I am not using a sidebar style as I do not want to fix the width
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": 0,
    "left": 0,
    "bottom": 0,
    "width": "24rem",
    "padding": "2rem 1rem",
    #"background-color": "#f8f9fa",
}


sidebar = html.Div(
    [
        html.H2("Filters"),
        html.Hr(),
        dbc.Nav(
            [
                html.P("Geography"), # TODO add a little info button here with link to geo explanation
                dropdown_geo,
                html.Br(),
                html.P("Data"), # TODO add a little info button here with link to geo explanation
                dropdown_var,
                #html.Br(),
                #dcc.Dropdown(id = 'three')

            ],
            vertical=True,
            pills=True,
        ),
    ],
    #style=SIDEBAR_STYLE,
)



# %% ../nbs/01_app.ipynb 10
app.layout = dbc.Container([
                dbc.Row([
                    dbc.Col(),

                    dbc.Col([mytitle],width = 9, style = {'margin-left':'7px','margin-top':'7px'})
                    ]),
                dbc.Row(
                    [dbc.Col(sidebar, width = 3),
                    dbc.Col([mygraph], width = 9)#, style = {'margin-left':'15px', 'margin-top':'7px', 'margin-right':'15px'})
                     ], justify = 'center'),                    
                ], fluid = True)

# %% ../nbs/01_app.ipynb 13
# Callback allows components to interact
@app.callback(
    Output(mygraph, 'figure'),
    Output(mytitle, 'children'),
    Input(dropdown_geo, 'value')
)
def update_graph(user_input):  # function arguments come from the component property of the Input
    repo = Repo('.', search_parent_directories=True)
    fig = px.choropleth_mapbox(sol_geo.get_df(agg_filter = user_input),
        # TODO - may need to use old version of mapping to get visibility hack to work..
                        #geojson = str(repo.working_tree_dir) + "/assets/sol_geo.json",
                            geojson=sol_geo.get_geojson(agg_filter = user_input),
                           locations=sol_geo.get_df(agg_filter = user_input).index,
                               color = 'total_pop',
                           color_continuous_scale="deep",
                               mapbox_style = 'carto-positron',
                               opacity = 0.8,
                        zoom = 5,
                        center={"lat": -9.565766, "lon": 162.012453}

    )
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    
    # returned objects are assigned to the component property of the Output
    return fig, '# Solomon Islands Data map - ' + user_input

# %% ../nbs/01_app.ipynb 20
# Run app
if __name__=='__main__':
    app.run_server(debug=True)
